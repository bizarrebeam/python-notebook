def fib_sequence(n):
    
    # raise an assertion error if generating the wrong input
    assert n > 0, "Input must be an integer." 

    series = [1]

    # we generate in one by one until reach n
    while len(series) < n:
        # the fundamental of fibonacci is the 1,1 at the beginning
        # keeps the program safe to run in case user input n = 1
        if len(series) == 1: 
            series.append(1)
        # after 1,1 is completed, the next series generated by summing the last two number
        else:
            series.append(series[-1] + series[-2])
    
    # because at the end i return it in concatenate with comma string, i have to convert series into string
    for index in range(len(series)):
        # why it has to be len(series)?
        # because i want to access index
        series[index] = str(series[ind])
    
    return(", ".join(series))

# wrapper function, to easily call this kind of function wrapping
def main():
    print(fib_sequence(int(input("How many numbers do you need?: "))))
    # because in the precedent i assign the func with n, the input right now is taken as n

# wrapper function that calls the function!
if __name__ == "__main__":
    main()
